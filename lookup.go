package main

// RecordTypeStrToRecordTypeMap allows a TYPE string to be converted to the RecordType value
var RecordTypeStrToRecordTypeMap = map[string]RecordType{
	"A":          RecordTypeA,
	"AAAA":       RecordTypeAAAA,
	"CNAME":      RecordTypeCNAME,
	"NS":         RecordTypeNS,
	"SOA":        RecordTypeSOA,
	"TXT":        RecordTypeTXT,
	"HINFO":      RecordTypeHINFO,
	"MB":         RecordTypeMB,
	"MD":         RecordTypeMD,
	"MF":         RecordTypeMF,
	"MG":         RecordTypeMG,
	"MX":         RecordTypeMX,
	"MR":         RecordTypeMR,
	"NULL":       RecordTypeNULL,
	"PTR":        RecordTypePTR,
	"WKS":        RecordTypeWKS,
	"MINFO":      RecordTypeMINFO,
	"MAILA":      RecordTypeMAILA,
	"MAILB":      RecordTypeMAILB,
	"RP":         RecordTypeRP,
	"AFSDB":      RecordTypeAFSDB,
	"X25":        RecordTypeX25,
	"ISDN":       RecordTypeISDN,
	"RT":         RecordTypeRT,
	"NSAP":       RecordTypeNSAP,
	"NSAPPTR":    RecordTypeNSAPPTR,
	"PX":         RecordTypePX,
	"GPOS":       RecordTypeGPOS,
	"SIG":        RecordTypeSIG,
	"KEY":        RecordTypeKEY,
	"LOC":        RecordTypeLOC,
	"NIMLOC":     RecordTypeNIMLOC,
	"SRV":        RecordTypeSRV,
	"ATMA":       RecordTypeATMA,
	"NAPTR":      RecordTypeNAPTR,
	"KX":         RecordTypeKX,
	"CERT":       RecordTypeCERT,
	"A6":         RecordTypeA6,
	"NXT":        RecordTypeNXT,
	"EID":        RecordTypeEID,
	"DNAME":      RecordTypeDNAME,
	"OPT":        RecordTypeOPT,
	"APL":        RecordTypeAPL,
	"SINK":       RecordTypeSINK,
	"DS":         RecordTypeDS,
	"SSHFP":      RecordTypeSSHFP,
	"IPSECKEY":   RecordTypeIPSECKEY,
	"RRSIG":      RecordTypeRRSIG,
	"NSEC":       RecordTypeNSEC,
	"DNSKEY":     RecordTypeDNSKEY,
	"DHCID":      RecordTypeDHCID,
	"NSEC3":      RecordTypeNSEC3,
	"NSEC3PARAM": RecordTypeNSEC3PARAM,
	"TLSA":       RecordTypeTLSA,
	"SMIMEA":     RecordTypeSMIMEA,
	"HIP":        RecordTypeHIP,
	"NINFO":      RecordTypeNINFO,
	"RKEY":       RecordTypeRKEY,
	"TALINK":     RecordTypeTALINK,
	"CDS":        RecordTypeCDS,
	"CDNSKEY":    RecordTypeCDNSKEY,
	"OPENPGPKEY": RecordTypeOPENPGPKEY,
	"CSYNC":      RecordTypeCSYNC,
	"UINFO":      RecordTypeUINFO,
	"UID":        RecordTypeUID,
	"GID":        RecordTypeGID,
	"UNSPEC":     RecordTypeUNSPEC,
	"NID":        RecordTypeNID,
	"L32":        RecordTypeL32,
	"L64":        RecordTypeL64,
	"LP":         RecordTypeLP,
	"EUI48":      RecordTypeEUI48,
	"EUI64":      RecordTypeEUI64,
	"SPF":        RecordTypeSPF,
	"TKEY":       RecordTypeTKEY,
	"TSIG":       RecordTypeTSIG,
	"IXFR":       RecordTypeIXFR,
	"AXFR":       RecordTypeAXFR,
	"ANY":        RecordTypeWildcard,
	"URI":        RecordTypeURI,
	"CAA":        RecordTypeCAA,
	"DOA":        RecordTypeDOA,
	"TA":         RecordTypeTA,
	"DLV":        RecordTypeDLV,
}

// RecordTypeToStrMap gets a string representation for a RecordType
var RecordTypeToStrMap = map[RecordType]string{
	RecordTypeA:          "A",
	RecordTypeAAAA:       "AAAA",
	RecordTypeCNAME:      "CNAME",
	RecordTypeNS:         "NS",
	RecordTypeSOA:        "SOA",
	RecordTypeTXT:        "TXT",
	RecordTypeHINFO:      "HINFO",
	RecordTypeMB:         "MB",
	RecordTypeMD:         "MD",
	RecordTypeMF:         "MF",
	RecordTypeMG:         "MF",
	RecordTypeMX:         "MX",
	RecordTypeMR:         "MR",
	RecordTypeNULL:       "NULL",
	RecordTypePTR:        "PTR",
	RecordTypeWKS:        "WKS",
	RecordTypeMINFO:      "MINFO",
	RecordTypeMAILA:      "MAILA",
	RecordTypeMAILB:      "MAILB",
	RecordTypeRP:         "RP",
	RecordTypeAFSDB:      "AFSDB",
	RecordTypeX25:        "X25",
	RecordTypeRT:         "RT",
	RecordTypeNSAP:       "NSAP",
	RecordTypeNSAPPTR:    "NSAPPTR",
	RecordTypePX:         "PX",
	RecordTypeGPOS:       "GPOS",
	RecordTypeSIG:        "SIG",
	RecordTypeKEY:        "KEY",
	RecordTypeLOC:        "LOC",
	RecordTypeNIMLOC:     "NIMLOC",
	RecordTypeSRV:        "SRV",
	RecordTypeATMA:       "ATMA",
	RecordTypeNAPTR:      "NAPTR",
	RecordTypeKX:         "KX",
	RecordTypeCERT:       "CERT",
	RecordTypeA6:         "A6",
	RecordTypeNXT:        "NXT",
	RecordTypeEID:        "EID",
	RecordTypeDNAME:      "DNAME",
	RecordTypeOPT:        "OPT",
	RecordTypeAPL:        "APL",
	RecordTypeSINK:       "SINK",
	RecordTypeDS:         "DS",
	RecordTypeSSHFP:      "SSHFP",
	RecordTypeIPSECKEY:   "IPSECKEY",
	RecordTypeRRSIG:      "RRSIG",
	RecordTypeNSEC:       "NSEC",
	RecordTypeDNSKEY:     "DNSKEY",
	RecordTypeDHCID:      "DHCID",
	RecordTypeNSEC3:      "NSEC3",
	RecordTypeNSEC3PARAM: "NSEC3PARAM",
	RecordTypeTLSA:       "TLSA",
	RecordTypeSMIMEA:     "SMIMEA",
	RecordTypeHIP:        "HIP",
	RecordTypeNINFO:      "NINFO",
	RecordTypeTALINK:     "TALINK",
	RecordTypeCDS:        "CDS",
	RecordTypeCDNSKEY:    "CDNSKEY",
	RecordTypeOPENPGPKEY: "OPENPGPKEY",
	RecordTypeCSYNC:      "CSYNC",
	RecordTypeUINFO:      "UINFO",
	RecordTypeUID:        "UID",
	RecordTypeGID:        "GID",
	RecordTypeUNSPEC:     "UNSPEC",
	RecordTypeNID:        "NID",
	RecordTypeL32:        "L32",
	RecordTypeL64:        "L64",
	RecordTypeLP:         "LP",
	RecordTypeEUI48:      "EUI48",
	RecordTypeEUI64:      "EUI64",
	RecordTypeSPF:        "SPF",
	RecordTypeTKEY:       "TKEY",
	RecordTypeTSIG:       "TSIG",
	RecordTypeIXFR:       "IXFR",
	RecordTypeAXFR:       "AXFR",
	RecordTypeWildcard:   "ANY",
	RecordTypeURI:        "URI",
	RecordTypeCAA:        "CAA",
	RecordTypeDOA:        "DOA",
	RecordTypeTA:         "TA",
	RecordTypeDLV:        "DLV",
}

// ObsoleteRecordTypes denotes record types which have become obsolete over the years
var ObsoleteRecordTypes = []RecordType{
	RecordTypeMD,
	RecordTypeMF,
	RecordTypeMAILA,
	RecordTypeMB,
	RecordTypeMG,
	RecordTypeMR,
	RecordTypeMINFO,
	RecordTypeMAILB,
	RecordTypeWKS,
	RecordTypeNULL,
	RecordTypeA6,
	RecordTypeNXT,
	RecordTypeKEY,
	RecordTypeSIG,
	RecordTypeHINFO,
	RecordTypeRP,
	RecordTypeX25,
	RecordTypeISDN,
	RecordTypeRT,
	RecordTypeNSAP,
	RecordTypeNSAPPTR,
	RecordTypePX,
	RecordTypeEID,
	RecordTypeNIMLOC,
	RecordTypeATMA,
	RecordTypeAPL,
	RecordTypeSINK,
	RecordTypeGPOS,
	RecordTypeUINFO,
	RecordTypeUID,
	RecordTypeGID,
	RecordTypeUNSPEC,
	RecordTypeSPF,
	RecordTypeNINFO,
	RecordTypeRKEY,
	RecordTypeTALINK,
	RecordTypeNID,
	RecordTypeL32,
	RecordTypeL64,
	RecordTypeLP,
	RecordTypeEUI48,
	RecordTypeEUI64,
	RecordTypeDOA,
}

// NotImplementedRecordTypes are a slice of RR types that have not been implemented
// in this client yet but remain here to return appropriate information for the
// requesting user.
var NotImplementedRecordTypes = []RecordType{
	RecordTypeAFSDB,
	RecordTypeLOC,
	RecordTypeSRV,
	RecordTypeNAPTR,
	RecordTypeKX,
	RecordTypeCERT,
	RecordTypeDNAME,
	RecordTypeOPT,
	RecordTypeDS,
	RecordTypeSSHFP,
	RecordTypeIPSECKEY,
	RecordTypeRRSIG,
	RecordTypeNSEC,
	RecordTypeDNSKEY,
	RecordTypeDHCID,
	RecordTypeNSEC3,
	RecordTypeNSEC3PARAM,
	RecordTypeTLSA,
	RecordTypeSMIMEA,
	RecordTypeHIP,
	RecordTypeCDS,
	RecordTypeCDNSKEY,
	RecordTypeOPENPGPKEY,
	RecordTypeCSYNC,
	RecordTypeTKEY,
	RecordTypeTSIG,
	RecordTypeIXFR,
	RecordTypeAXFR,
	RecordTypeWildcard,
	RecordTypeURI,
	RecordTypeCAA,
	RecordTypeTA,
	RecordTypeDLV,
}

// RecordClassToStrMap gets a string representation for a RecordClass
var RecordClassToStrMap = map[RecordClass]string{
	RecordClassIN:       "IN",
	RecordClassCS:       "CS",
	RecordClassCH:       "CH",
	RecordClassWildcard: "*",
}

// OpcodeToStrMap gets a string representation for a Opcode
var OpcodeToStrMap = map[Opcode]string{
	OpcodeQuery:  "QUERY",
	OpcodeIQuery: "IQUERY",
	OpcodeStatus: "STATUS",
}

// ResponseCodeToStrMap gets a string representation for a ResponseCode
var ResponseCodeToStrMap = map[ResponseCode]string{
	ResponseCodeNoError:        "NO ERROR",
	ResponseCodeFormatError:    "FORMAT ERROR",
	ResponseCodeServerFailure:  "SERVER FAILURE",
	ResponseCodeNameError:      "NAME ERROR",
	ResponseCodeNotImplemented: "NOT IMPLEMENTED",
	ResponseCodeRefused:        "REFUSED",
}

// IsRecordTypeNotImplemented checks if the RecordType is a supported operation
func IsRecordTypeNotImplemented(t RecordType) bool {
	for _, qType := range NotImplementedRecordTypes {
		if t == qType {
			return true
		}
	}
	return false
}

// IsRecordTypeObsolete checks if the RecordType is an obsolete record type
func IsRecordTypeObsolete(t RecordType) bool {
	for _, qType := range ObsoleteRecordTypes {
		if t == qType {
			return true
		}
	}
	return false
}
